#include "MozziConfigValues.h"
#define MOZZI_AUDIO_MODE   MOZZI_OUTPUT_I2S_DAC
#define MOZZI_I2S_PIN_BCK  26
#define MOZZI_I2S_PIN_WS   25
#define MOZZI_I2S_PIN_DATA 22
#define MOZZI_CONTROL_RATE 256

#include <Arduino.h>
#include <WiFi.h>
#include <Mozzi.h>
#include "Esp32SynchronizationContext.h"
#include "Keyboard.h"
#include "Voicer.h" 

// General config
#define LED_PIN 2

// Create a Voicer object
Voicer voicer;

// Create a Keyboard object
Keyboard keyboard;

// Thread-safe synchronization context
Esp32SynchronizationContext syncContext;
bool updateRequested = false;

// Callback functions for handling key press and release events
void onKeyPress(int key) {
    byte note = key + 60;
    voicer.noteOn(note);  // Use Voicer to handle note on
    digitalWrite(LED_PIN, HIGH);
}

void onKeyRelease(int key) {
    byte note = key + 60;  // Adjust the key to match your desired note range
    voicer.noteOff(note);  // Use Voicer to handle note off
    if (!voicer.isPlaying()) {
        digitalWrite(LED_PIN, LOW);
    }
}

void updateControl() {
    if (!syncContext.update()) {
        Serial.println("Could not update synchronization context");
    }

    if (updateRequested) {
        keyboard.update();  // Use the keyboard object to update key states
        voicer.update(); // Update all active voices
        updateRequested = false;
    }
}

AudioOutput updateAudio() {
    return MonoOutput::fromNBit(24, voicer.getSample());  // Use Voicer to get samples
}

void updateKeyboardTask(void *state) {
    // RUNS ON OTHER CORE
    while (true) {
        if (updateRequested) {
            delay(1); // Feed watchdog
            continue; // Don't do anything if the main thread is still processing the last update
        }
        // Request the main thread to update keyboard states
        syncContext.send(
            [](void *state) {
                // RUNS ON MAIN CORE
                updateRequested = true;
            }
        );
        delay(10); // Feed watchdog
    }
}

void setup() {
    Serial.begin(115200);
    WiFi.mode(WIFI_OFF); // Disable WiFi to conserve power for audio and touch updates

    // LED debug
    pinMode(LED_PIN, OUTPUT);

    // Initialize the Keyboard object and set the callbacks
    keyboard.onKeyPress(onKeyPress);
    keyboard.onKeyRelease(onKeyRelease);

    if (!syncContext.begin()) {
        Serial.println("Error initializing synchronization context");
        while (true) {
            ; // Halt
        }
    }
    // Create a task on the first core to asynchronously update touch states
    xTaskCreatePinnedToCore(
        updateKeyboardTask,  // Function that should be called
        "Keyboard Updater",  // Name of the task (for debugging)
        1000,               // Stack size (bytes)
        NULL,               // Parameter to pass
        1,                  // Task priority
        NULL,               // Task handle
        0                   // Core
    );

    startMozzi(CONTROL_RATE);
}

void loop() {
    audioHook();
}
